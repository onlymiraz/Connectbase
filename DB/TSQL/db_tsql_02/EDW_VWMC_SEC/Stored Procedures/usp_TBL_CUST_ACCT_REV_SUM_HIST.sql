CREATE PROCEDURE EDW_VWMC_SEC.usp_TBL_CUST_ACCT_REV_SUM_HIST
AS
	SET XACT_ABORT, NOCOUNT ON;
BEGIN TRY

	DECLARE @EVENTID INT;

	INSERT INTO [LOG].tbl_StoreProc
	(
		[EVENTNAME],
		[EVENTSTART],
		[EVENTTYPE],
		[EVENTDESCRIPTION]
	)
	VALUES
	(
		'EDW_VWMC_SEC.usp_TBL_CUST_ACCT_REV_SUM_HIST',
		CAST(GETDATE() AS DATETIME),
		'STORE PROC',
		'SINGLE_INGESTION'
	)

	SET @EVENTID = SCOPE_IDENTITY();

	BEGIN TRANSACTION

	DELETE FROM EDW_VWMC_SEC.TBL_CUST_ACCT_REV_SUM_HIST  WHERE BILL_MONTH>=DATEADD(month, DATEDIFF(MONTH, -1, GETDATE()) - 2, 0)

	INSERT INTO EDW_VWMC_SEC.TBL_CUST_ACCT_REV_SUM_HIST
	SELECT 
        ACCT_JOIN_KEY,
        BILL_MONTH,
        BILL_CYCLE_CD,
        BILL_CYCLE_DT,
        BILL_SYS_CD,
        BILL_SUBSYS_CD,
        CUST_ACCT_JOIN_KEY,
        BILLED_SVC_ACCS_METHD_NO,
        BILL_AMT_TYPE_CD,
        BILL_AMT_TYPE_DS,
        BILLED_UCN,
        GL_CMPY_NO,
        GL_OPRTG_AREA_NO,
        GL_MAIN_ACCT_NO,
        GL_SUB_ACCT_NO,
        GL_COST_CTR_NO,
        GL_MATRIX_NO,
        BILL_AMT_RAW,
        BILL_AMT_ACCT_ADJ,
        BILL_AMT_DSCNT,
        BILL_AMT_LIST,
        BILL_AMT_NET,
        BILL_AMT_PRORATE,
        BILL_AMT_TOTAL,
        BILL_QTY,
        PRD_SVC_CD,
        PRC_SVC_CD_DS,
        PRODUCT_JOIN_KEY,
        PROMO_CD,
        BUNDLE_CD,
        FEATURE_GRP_CD,
        GEOGRAPHY_JOIN_KEY,
        CABS_OPRTG_CMPY_NO,
        LAST_LOAD_DTTM,
        BR_LAST_LOAD_DTTM,
        ACCT_CUST_START_DT,
        ACCT_CUST_END_DT,
        ACCT_BILL_SYS_CD,
        ACCT_BILL_SUBSYS_CD,
        BILLING_UCN,
        ACCT_BTN,
        ACCT_STAT_CD,
        CASE 
            WHEN TRY_CAST(ACCT_ACTIVATION_DT AS DATE) IS NOT NULL THEN TRY_CAST(ACCT_ACTIVATION_DT AS DATE)
            ELSE NULL
        END AS ACCT_ACTIVATION_DT,
        ACCT_CUST_TYPE_CD,
        ACCT_CUST_TYPE_DS,
        DEFAULT_CUST_IND,
        CUST_NO,
        CUST_NM,
        CUST_STREET_ADDR1,
        CUST_STREET_ADDR2,
        CUST_CITY,
        CUST_ZIP_CD,
        CUST_CONTACT_NM,
        CUST_CONTACT_TEL,
        CUST_COMMENTS,
        CUST_SALES_REP_CD,
        CUST_SALES_REP_START_DT,
        CUST_SALES_REP_END_DT,
        CUST_SALES_REP_BILL_SYS_CD,
        CUST_SALES_REP_BILL_SUBSYS_CD,
        CUST_SALES_REP_CHNL_TYP_CD,
        CUST_SALES_REP_LAST_NM,
        CUST_SALES_REP_FIRST_NM,
        CUST_SALES_REP_CRIS_ID,
        CUST_SALES_REP_EMAIL,
        CUST_SALES_REP_LAN_ID,
        CUST_SALES_REP_TITLE_CD,
        CUST_SALES_REP_TITLE_DS,
        CUST_SALES_REP_CHNL_L1_DS,
        CUST_SALES_REP_CHNL_L2_DS,
        CUST_SALES_REP_CHNL_L3_DS,
        CUST_SALES_REP_CHNL_L4_DS,
        CUST_SALES_REP_CHNL_L5_DS,
        CUST_SALES_REP_CHNL_L6_DS,
        CUST_SALES_REP_CHNL_L7_DS,
        CUST_SALES_REP_CHNL_L8_DS,
        CUST_SALES_REP_CHNL_L9_DS,
        CUST_SALES_REP_CHNL_L10_DS,
        SUPERVISOR_CRIS_ID,
        SUPERVISOR_NAME,
        RVP_NAME,
        CUST_SEG_CD,
        CUST_SEG_NM,
        CUST_SEG_LEVEL_1_NM,
        CUST_SEG_LEVEL_2_NM,
        CUST_SEG_LEVEL_3_NM,
        CUST_SEG_LEVEL_4_NM,
        CUST_SEG_COUNTABLE_IND,
        CUST_SEG_LEVEL_1_ROLLUP_IND,
        CUST_SEG_LEVEL_2_ROLLUP_IND,
        CUST_SEG_LEVEL_3_ROLLUP_IND,
        CUST_SEG_LEVEL_4_ROLLUP_IND,
        ACCT_CREATE_DT,
        ACCT_DIM_CREATE_DT,
        ACCT_LAST_UPD_USR,
        ACCT_LAST_UPD_DT,
        ACCT_LAST_UPD_COMMENT,
        CUST_CREATE_DT,
        CUST_DIM_CREATE_DT,
        CUST_LAST_UPD_USR,
        CUST_LAST_UPD_DT,
        CUST_LAST_UPD_COMMENT,
        DIRECT_SALES_REV_TYPE_CD,
        DIRECT_SALES_REV_TYPE_DS,
        DIRECT_COMMISSION_IND,
        CUST_OSO_NO,
        BILL_SALES_REP_ID,
        ACCT_DIM_START_DT,
        ACCT_DIM_END_DT,
        CUST_DIM_START_DT,
        CUST_DIM_END_DT 
	FROM LZ.TBL_CUST_ACCT_REV_SUM_HIST
	
	COMMIT TRANSACTION

	UPDATE L
    SET L.EVENTEND = CAST(GETDATE() AS DATETIME)
    FROM LOG.tbl_StoreProc L
    WHERE L.EVENTID = @EventID;

END TRY
BEGIN CATCH
	IF @@trancount > 0 ROLLBACK TRANSACTION
	EXEC usp_error_handler
	RETURN 55555
END CATCH